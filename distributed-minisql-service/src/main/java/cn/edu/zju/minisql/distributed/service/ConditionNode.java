/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.zju.minisql.distributed.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-11")
public class ConditionNode implements org.apache.thrift.TBase<ConditionNode, ConditionNode._Fields>, java.io.Serializable, Cloneable, Comparable<ConditionNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConditionNode");

  private static final org.apache.thrift.protocol.TField LEFT_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("leftElement", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RIGHT_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("rightElement", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_RIGHT_ELEMENT_CONSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("isRightElementConstant", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LEFT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("leftNode", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RIGHT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("rightNode", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConditionNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConditionNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String leftElement; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String rightElement; // required
  public boolean isRightElementConstant; // required
  /**
   * 
   * @see Operator
   */
  public @org.apache.thrift.annotation.Nullable Operator operator; // required
  public @org.apache.thrift.annotation.Nullable ConditionNode leftNode; // required
  public @org.apache.thrift.annotation.Nullable ConditionNode rightNode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_ELEMENT((short)1, "leftElement"),
    RIGHT_ELEMENT((short)2, "rightElement"),
    IS_RIGHT_ELEMENT_CONSTANT((short)3, "isRightElementConstant"),
    /**
     * 
     * @see Operator
     */
    OPERATOR((short)4, "operator"),
    LEFT_NODE((short)5, "leftNode"),
    RIGHT_NODE((short)6, "rightNode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_ELEMENT
          return LEFT_ELEMENT;
        case 2: // RIGHT_ELEMENT
          return RIGHT_ELEMENT;
        case 3: // IS_RIGHT_ELEMENT_CONSTANT
          return IS_RIGHT_ELEMENT_CONSTANT;
        case 4: // OPERATOR
          return OPERATOR;
        case 5: // LEFT_NODE
          return LEFT_NODE;
        case 6: // RIGHT_NODE
          return RIGHT_NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISRIGHTELEMENTCONSTANT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("leftElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("rightElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_RIGHT_ELEMENT_CONSTANT, new org.apache.thrift.meta_data.FieldMetaData("isRightElementConstant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Operator.class)));
    tmpMap.put(_Fields.LEFT_NODE, new org.apache.thrift.meta_data.FieldMetaData("leftNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ConditionNode")));
    tmpMap.put(_Fields.RIGHT_NODE, new org.apache.thrift.meta_data.FieldMetaData("rightNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ConditionNode")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConditionNode.class, metaDataMap);
  }

  public ConditionNode() {
  }

  public ConditionNode(
    java.lang.String leftElement,
    java.lang.String rightElement,
    boolean isRightElementConstant,
    Operator operator,
    ConditionNode leftNode,
    ConditionNode rightNode)
  {
    this();
    this.leftElement = leftElement;
    this.rightElement = rightElement;
    this.isRightElementConstant = isRightElementConstant;
    setIsRightElementConstantIsSet(true);
    this.operator = operator;
    this.leftNode = leftNode;
    this.rightNode = rightNode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConditionNode(ConditionNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLeftElement()) {
      this.leftElement = other.leftElement;
    }
    if (other.isSetRightElement()) {
      this.rightElement = other.rightElement;
    }
    this.isRightElementConstant = other.isRightElementConstant;
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    if (other.isSetLeftNode()) {
      this.leftNode = new ConditionNode(other.leftNode);
    }
    if (other.isSetRightNode()) {
      this.rightNode = new ConditionNode(other.rightNode);
    }
  }

  public ConditionNode deepCopy() {
    return new ConditionNode(this);
  }

  @Override
  public void clear() {
    this.leftElement = null;
    this.rightElement = null;
    setIsRightElementConstantIsSet(false);
    this.isRightElementConstant = false;
    this.operator = null;
    this.leftNode = null;
    this.rightNode = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLeftElement() {
    return this.leftElement;
  }

  public ConditionNode setLeftElement(@org.apache.thrift.annotation.Nullable java.lang.String leftElement) {
    this.leftElement = leftElement;
    return this;
  }

  public void unsetLeftElement() {
    this.leftElement = null;
  }

  /** Returns true if field leftElement is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftElement() {
    return this.leftElement != null;
  }

  public void setLeftElementIsSet(boolean value) {
    if (!value) {
      this.leftElement = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRightElement() {
    return this.rightElement;
  }

  public ConditionNode setRightElement(@org.apache.thrift.annotation.Nullable java.lang.String rightElement) {
    this.rightElement = rightElement;
    return this;
  }

  public void unsetRightElement() {
    this.rightElement = null;
  }

  /** Returns true if field rightElement is set (has been assigned a value) and false otherwise */
  public boolean isSetRightElement() {
    return this.rightElement != null;
  }

  public void setRightElementIsSet(boolean value) {
    if (!value) {
      this.rightElement = null;
    }
  }

  public boolean isIsRightElementConstant() {
    return this.isRightElementConstant;
  }

  public ConditionNode setIsRightElementConstant(boolean isRightElementConstant) {
    this.isRightElementConstant = isRightElementConstant;
    setIsRightElementConstantIsSet(true);
    return this;
  }

  public void unsetIsRightElementConstant() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRIGHTELEMENTCONSTANT_ISSET_ID);
  }

  /** Returns true if field isRightElementConstant is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRightElementConstant() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRIGHTELEMENTCONSTANT_ISSET_ID);
  }

  public void setIsRightElementConstantIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRIGHTELEMENTCONSTANT_ISSET_ID, value);
  }

  /**
   * 
   * @see Operator
   */
  @org.apache.thrift.annotation.Nullable
  public Operator getOperator() {
    return this.operator;
  }

  /**
   * 
   * @see Operator
   */
  public ConditionNode setOperator(@org.apache.thrift.annotation.Nullable Operator operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ConditionNode getLeftNode() {
    return this.leftNode;
  }

  public ConditionNode setLeftNode(@org.apache.thrift.annotation.Nullable ConditionNode leftNode) {
    this.leftNode = leftNode;
    return this;
  }

  public void unsetLeftNode() {
    this.leftNode = null;
  }

  /** Returns true if field leftNode is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftNode() {
    return this.leftNode != null;
  }

  public void setLeftNodeIsSet(boolean value) {
    if (!value) {
      this.leftNode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ConditionNode getRightNode() {
    return this.rightNode;
  }

  public ConditionNode setRightNode(@org.apache.thrift.annotation.Nullable ConditionNode rightNode) {
    this.rightNode = rightNode;
    return this;
  }

  public void unsetRightNode() {
    this.rightNode = null;
  }

  /** Returns true if field rightNode is set (has been assigned a value) and false otherwise */
  public boolean isSetRightNode() {
    return this.rightNode != null;
  }

  public void setRightNodeIsSet(boolean value) {
    if (!value) {
      this.rightNode = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LEFT_ELEMENT:
      if (value == null) {
        unsetLeftElement();
      } else {
        setLeftElement((java.lang.String)value);
      }
      break;

    case RIGHT_ELEMENT:
      if (value == null) {
        unsetRightElement();
      } else {
        setRightElement((java.lang.String)value);
      }
      break;

    case IS_RIGHT_ELEMENT_CONSTANT:
      if (value == null) {
        unsetIsRightElementConstant();
      } else {
        setIsRightElementConstant((java.lang.Boolean)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((Operator)value);
      }
      break;

    case LEFT_NODE:
      if (value == null) {
        unsetLeftNode();
      } else {
        setLeftNode((ConditionNode)value);
      }
      break;

    case RIGHT_NODE:
      if (value == null) {
        unsetRightNode();
      } else {
        setRightNode((ConditionNode)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_ELEMENT:
      return getLeftElement();

    case RIGHT_ELEMENT:
      return getRightElement();

    case IS_RIGHT_ELEMENT_CONSTANT:
      return isIsRightElementConstant();

    case OPERATOR:
      return getOperator();

    case LEFT_NODE:
      return getLeftNode();

    case RIGHT_NODE:
      return getRightNode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LEFT_ELEMENT:
      return isSetLeftElement();
    case RIGHT_ELEMENT:
      return isSetRightElement();
    case IS_RIGHT_ELEMENT_CONSTANT:
      return isSetIsRightElementConstant();
    case OPERATOR:
      return isSetOperator();
    case LEFT_NODE:
      return isSetLeftNode();
    case RIGHT_NODE:
      return isSetRightNode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ConditionNode)
      return this.equals((ConditionNode)that);
    return false;
  }

  public boolean equals(ConditionNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_leftElement = true && this.isSetLeftElement();
    boolean that_present_leftElement = true && that.isSetLeftElement();
    if (this_present_leftElement || that_present_leftElement) {
      if (!(this_present_leftElement && that_present_leftElement))
        return false;
      if (!this.leftElement.equals(that.leftElement))
        return false;
    }

    boolean this_present_rightElement = true && this.isSetRightElement();
    boolean that_present_rightElement = true && that.isSetRightElement();
    if (this_present_rightElement || that_present_rightElement) {
      if (!(this_present_rightElement && that_present_rightElement))
        return false;
      if (!this.rightElement.equals(that.rightElement))
        return false;
    }

    boolean this_present_isRightElementConstant = true;
    boolean that_present_isRightElementConstant = true;
    if (this_present_isRightElementConstant || that_present_isRightElementConstant) {
      if (!(this_present_isRightElementConstant && that_present_isRightElementConstant))
        return false;
      if (this.isRightElementConstant != that.isRightElementConstant)
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_leftNode = true && this.isSetLeftNode();
    boolean that_present_leftNode = true && that.isSetLeftNode();
    if (this_present_leftNode || that_present_leftNode) {
      if (!(this_present_leftNode && that_present_leftNode))
        return false;
      if (!this.leftNode.equals(that.leftNode))
        return false;
    }

    boolean this_present_rightNode = true && this.isSetRightNode();
    boolean that_present_rightNode = true && that.isSetRightNode();
    if (this_present_rightNode || that_present_rightNode) {
      if (!(this_present_rightNode && that_present_rightNode))
        return false;
      if (!this.rightNode.equals(that.rightNode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLeftElement()) ? 131071 : 524287);
    if (isSetLeftElement())
      hashCode = hashCode * 8191 + leftElement.hashCode();

    hashCode = hashCode * 8191 + ((isSetRightElement()) ? 131071 : 524287);
    if (isSetRightElement())
      hashCode = hashCode * 8191 + rightElement.hashCode();

    hashCode = hashCode * 8191 + ((isRightElementConstant) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOperator()) ? 131071 : 524287);
    if (isSetOperator())
      hashCode = hashCode * 8191 + operator.getValue();

    hashCode = hashCode * 8191 + ((isSetLeftNode()) ? 131071 : 524287);
    if (isSetLeftNode())
      hashCode = hashCode * 8191 + leftNode.hashCode();

    hashCode = hashCode * 8191 + ((isSetRightNode()) ? 131071 : 524287);
    if (isSetRightNode())
      hashCode = hashCode * 8191 + rightNode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConditionNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLeftElement(), other.isSetLeftElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftElement, other.leftElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRightElement(), other.isSetRightElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightElement, other.rightElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsRightElementConstant(), other.isSetIsRightElementConstant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRightElementConstant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRightElementConstant, other.isRightElementConstant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperator(), other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLeftNode(), other.isSetLeftNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftNode, other.leftNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRightNode(), other.isSetRightNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightNode, other.rightNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ConditionNode(");
    boolean first = true;

    sb.append("leftElement:");
    if (this.leftElement == null) {
      sb.append("null");
    } else {
      sb.append(this.leftElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightElement:");
    if (this.rightElement == null) {
      sb.append("null");
    } else {
      sb.append(this.rightElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRightElementConstant:");
    sb.append(this.isRightElementConstant);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftNode:");
    if (this.leftNode == null) {
      sb.append("null");
    } else {
      sb.append(this.leftNode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightNode:");
    if (this.rightNode == null) {
      sb.append("null");
    } else {
      sb.append(this.rightNode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConditionNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConditionNodeStandardScheme getScheme() {
      return new ConditionNodeStandardScheme();
    }
  }

  private static class ConditionNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConditionNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConditionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leftElement = iprot.readString();
              struct.setLeftElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RIGHT_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rightElement = iprot.readString();
              struct.setRightElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_RIGHT_ELEMENT_CONSTANT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRightElementConstant = iprot.readBool();
              struct.setIsRightElementConstantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operator = cn.edu.zju.minisql.distributed.service.Operator.findByValue(iprot.readI32());
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEFT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leftNode = new ConditionNode();
              struct.leftNode.read(iprot);
              struct.setLeftNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RIGHT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rightNode = new ConditionNode();
              struct.rightNode.read(iprot);
              struct.setRightNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConditionNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.leftElement != null) {
        oprot.writeFieldBegin(LEFT_ELEMENT_FIELD_DESC);
        oprot.writeString(struct.leftElement);
        oprot.writeFieldEnd();
      }
      if (struct.rightElement != null) {
        oprot.writeFieldBegin(RIGHT_ELEMENT_FIELD_DESC);
        oprot.writeString(struct.rightElement);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RIGHT_ELEMENT_CONSTANT_FIELD_DESC);
      oprot.writeBool(struct.isRightElementConstant);
      oprot.writeFieldEnd();
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeI32(struct.operator.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.leftNode != null) {
        oprot.writeFieldBegin(LEFT_NODE_FIELD_DESC);
        struct.leftNode.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rightNode != null) {
        oprot.writeFieldBegin(RIGHT_NODE_FIELD_DESC);
        struct.rightNode.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConditionNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConditionNodeTupleScheme getScheme() {
      return new ConditionNodeTupleScheme();
    }
  }

  private static class ConditionNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConditionNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConditionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLeftElement()) {
        optionals.set(0);
      }
      if (struct.isSetRightElement()) {
        optionals.set(1);
      }
      if (struct.isSetIsRightElementConstant()) {
        optionals.set(2);
      }
      if (struct.isSetOperator()) {
        optionals.set(3);
      }
      if (struct.isSetLeftNode()) {
        optionals.set(4);
      }
      if (struct.isSetRightNode()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLeftElement()) {
        oprot.writeString(struct.leftElement);
      }
      if (struct.isSetRightElement()) {
        oprot.writeString(struct.rightElement);
      }
      if (struct.isSetIsRightElementConstant()) {
        oprot.writeBool(struct.isRightElementConstant);
      }
      if (struct.isSetOperator()) {
        oprot.writeI32(struct.operator.getValue());
      }
      if (struct.isSetLeftNode()) {
        struct.leftNode.write(oprot);
      }
      if (struct.isSetRightNode()) {
        struct.rightNode.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConditionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.leftElement = iprot.readString();
        struct.setLeftElementIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rightElement = iprot.readString();
        struct.setRightElementIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isRightElementConstant = iprot.readBool();
        struct.setIsRightElementConstantIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operator = cn.edu.zju.minisql.distributed.service.Operator.findByValue(iprot.readI32());
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.leftNode = new ConditionNode();
        struct.leftNode.read(iprot);
        struct.setLeftNodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rightNode = new ConditionNode();
        struct.rightNode.read(iprot);
        struct.setRightNodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

